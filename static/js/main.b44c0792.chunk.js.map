{"version":3,"sources":["movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","props","state","isNominated","nominate","bind","remove","removeNomination","movie","title","this","year","poster","onRemove","onRemoveNomination","inNominationList","key","onNominate","setState","button","Button","color","size","onClick","disabled","className","src","alt","align","React","Component","TheShoppies","searchQuery","results","nominations","onSearch","onSearchQueryChange","e","target","value","event","preventDefault","axios","get","process","then","res","status","HttpStatus","OK","movies","data","Search","map","i","Title","Year","Poster","catch","error","console","log","keyCode","movieComponent","length","document","getElementById","style","display","prevState","identifier","filter","item","Navbar","dark","expand","NavbarBrand","Alert","id","Container","Form","inline","onSubmit","FormGroup","Input","placeholder","onChange","icon","faSearch","Row","Col","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b44c0792.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'reactstrap'\nimport './movie.css'\n\nexport default class Movie extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isNominated: false,\n        }\n        this.nominate = this.nominate.bind(this);\n        this.remove = this.remove.bind(this);\n        this.removeNomination = this.removeNomination.bind(this);\n    }\n\n    nominate() {\n        const movie = <Movie title={this.props.title} year={this.props.year} poster={this.props.poster} onRemove={this.props.onRemove} onRemoveNomination={this.removeNomination} inNominationList={true} key={this.props.title + this.props.year}></Movie>;\n        const res = this.props.onNominate(movie);\n        if (res === true) this.setState({ isNominated: true });\n\n    }\n\n    remove() {\n        this.props.onRemove(this.props.title + this.props.year);\n        this.props.onRemoveNomination();\n    }\n\n    removeNomination() {\n        this.setState({ isNominated: false });\n    }\n\n    render() {\n        const button = !this.props.inNominationList ?\n        (<Button color=\"dark\" size=\"sm\" disabled={this.state.isNominated} onClick={this.nominate}>Nominate</Button>) :\n        (<Button color=\"dark\" size=\"sm\" onClick={this.remove}>Remove</Button>);\n\n        return (\n            <div className=\"movie-div\">\n                <div className='image-wrapper'>\n                    <img src={this.props.poster} alt='poster'></img>\n                </div>\n                <div className='title-wrapper'>\n                    <p className='movie-title' title={this.props.title}>{this.props.title}</p>\n                    <p className='movie-title' title={this.props.year}>{this.props.year}</p>\n                </div>\n                <div align=\"center\">\n                    {button}\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Alert, Navbar, NavbarBrand, Container, Button, Form, FormGroup, Input, Col, Row } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport './App.css';\nimport Movie from './movie'\nimport axios from 'axios';\nimport HttpStatus from 'http-status-codes';\n\nclass TheShoppies extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchQuery: '',\n      results: [],\n      nominations: []\n    };\n\n    this.onSearch = this.onSearch.bind(this);\n    this.onSearchQueryChange =this.onSearchQueryChange.bind(this);\n    this.onNominate = this.onNominate.bind(this);\n    this.onRemove = this.onRemove.bind(this);\n  }\n\n  onSearchQueryChange(e) {\n    this.setState({ searchQuery: e.target.value });\n  }\n\n  onSearch(event) {\n    event.preventDefault();\n    axios.get(`https://www.omdbapi.com/?s=${this.state.searchQuery}&apikey=${process.env.REACT_APP_OMDB_API_KEY}`)\n      .then (res => {\n          if (res.status === HttpStatus.OK) {\n              const movies = res.data.Search;\n              this.setState({ results: movies.map((movie, i) => <Movie title={movie.Title} year={movie.Year} poster={movie.Poster} onNominate={this.onNominate} onRemove={this.onRemove} inNominationList={false} key={i}></Movie>) });\n          }\n      })\n      .catch (error => {\n          console.log(error);\n      })\n  }\n\n  onEnterPress(event) {\n    if (event.keyCode === 13) this.onSearch();\n  }\n\n  onNominate(movieComponent) {\n    if (this.state.nominations.length >= 5) return false;\n    if (this.state.nominations.length >= 4) {\n      let alert = document.getElementById(\"finish-alert\");\n      alert.style.display = \"block\";\n    };\n    this.setState(prevState => ({\n      nominations: [...prevState.nominations, movieComponent]\n    }));\n    return true;\n  }\n\n  onRemove(identifier) {\n    let alert = document.getElementById(\"finish-alert\");\n    alert.style.display = \"none\";\n    this.setState(prevState => ({\n      nominations: prevState.nominations.filter(item => item.props.title+item.props.year !== identifier)\n    }));\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar color=\"dark\" dark expand=\"md\">\n            <NavbarBrand className=\"gold-color\">\n              The Shoppies\n            </NavbarBrand>\n        </Navbar>\n        <Alert id=\"finish-alert\">\n          <h4>Congratulation!</h4>\n          You have successfully nominated 5 movies!\n        </Alert>\n        <br></br>\n\n        <Container>\n          <Form inline onSubmit={this.onSearch}>\n            <FormGroup className=\"ml-5 w-75\">\n              <Input id=\"search-query\" className=\"w-100\" placeholder=\"Movie title\" onChange={this.onSearchQueryChange} value={this.state.searchQuery}></Input>\n            </FormGroup>\n            <Button onClick={this.onSearch} className=\"gold-color\">\n              <FontAwesomeIcon icon={faSearch}></FontAwesomeIcon>\n            </Button>\n          </Form>\n        </Container>\n\n        <br></br>\n\n        <Container>\n          <Row>\n            <Col id=\"search-result\" className=\"col-8\">\n              <h4>Results</h4>\n              {this.state.results}\n            </Col>\n            <Col id=\"nomination\">\n              <h4>Nomination list</h4>\n              {this.state.nominations}\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nfunction App(props) {\n  return (\n    <TheShoppies></TheShoppies>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}